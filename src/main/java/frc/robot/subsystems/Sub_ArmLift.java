// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Sub_ArmLift extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX talonSRX6;
    private WPI_TalonSRX talonSRX7;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    Encoder myEncoder = new Encoder(1, 2);
    double offset = ((double) myEncoder.get() / 2048.0);

    /**
    *
    */
    public Sub_ArmLift() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        talonSRX6 = new WPI_TalonSRX(6);
        talonSRX7 = new WPI_TalonSRX(7);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    public void armUp() {
        // offset = offset + 0.02;
        talonSRX6.set(ControlMode.PercentOutput, .6);
        talonSRX7.set(ControlMode.PercentOutput, .6);
    }

    public void armDown() {
        // offset = offset - 0.02;
        talonSRX6.set(ControlMode.PercentOutput, -.6);
        talonSRX7.set(ControlMode.PercentOutput, -.6);
    }

    public void armStop() {
        talonSRX6.set(ControlMode.PercentOutput, 0);
        talonSRX7.set(ControlMode.PercentOutput, 0);
    }

    public void armCustom(double percent) {
        talonSRX6.set(ControlMode.PercentOutput, percent);
        talonSRX7.set(ControlMode.PercentOutput, percent);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        double multp = 10;
        SmartDashboard.putNumber("Percent", (((double) myEncoder.get() / 2048.0) - offset) * multp);
        double error = (((double) myEncoder.get() / 2048.0) - offset) * multp;
        if (Math.abs(error) > .02) {
            armCustom(error);
        } else {
            armCustom(0);
        }

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
